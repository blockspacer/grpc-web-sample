---
apiVersion: v1
kind: Namespace
metadata:
  name: grpc-web-sample

##########
# server #
##########
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: server
  namespace: grpc-web-sample
  labels:
    app: grpc-web-sample
    role: server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grpc-web-sample
      role: server
  template:
    metadata:
      labels:
        app: grpc-web-sample
        role: server
    spec:
      containers:
        - name: server
          image: zuiurs/grpc-web-server:latest
          imagePullPolicy: Always
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:8080"]
            initialDelaySeconds: 5
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:8080"]
            initialDelaySeconds: 10
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: server
  namespace: grpc-web-sample
spec:
  type: ClusterIP
  ports:
    - name: "http-port"
      protocol: "TCP"
      port: 8080
      targetPort: 8080
  selector:
    app: grpc-web-sample
    role: server

##########
# client #
##########
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: client
  namespace: grpc-web-sample
  labels:
    app: grpc-web-sample
    role: client
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grpc-web-sample
      role: client
  template:
    metadata:
      labels:
        app: grpc-web-sample
        role: client
    spec:
      containers:
        - name: client
          image: zuiurs/grpc-web-client:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: client
  namespace: grpc-web-sample
  labels:
    app: grpc-web-sample
    role: client
spec:
  type: ClusterIP
  ports:
    - name: "http-port"
      protocol: "TCP"
      port: 8080
      targetPort: 80
  selector:
    app: grpc-web-sample
    role: client

#########
# envoy #
#########
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: envoy
  namespace: grpc-web-sample
  labels:
    app: grpc-web-sample
    role: envoy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grpc-web-sample
      role: envoy
  template:
    metadata:
      labels:
        app: grpc-web-sample
        role: envoy
    spec:
      volumes:
      - name: config
        configMap:
          name: envoy-config
      containers:
        - name: envoy
          image: envoyproxy/envoy
          volumeMounts:
          - name: config
            mountPath: /config
          command:
          - "/usr/local/bin/envoy"
          args:
            ["-l", "debug", "-c", "/config/envoy.yaml"]
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: envoy
  namespace: grpc-web-sample
spec:
  type: LoadBalancer
  ports:
    - name: "http-port"
      protocol: "TCP"
      port: 8080
      targetPort: 8080
  selector:
    app: grpc-web-sample
    role: envoy
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: envoy-config
  namespace: grpc-web-sample
data:
  envoy.yaml: |+
    admin:
      access_log_path: /tmp/admin_access.log
      address:
        socket_address: { address: 0.0.0.0, port_value: 9901 }

    static_resources:
      listeners:
      - name: listener_0
        address:
          socket_address: { address: 0.0.0.0, port_value: 8080 }
        filter_chains:
        - filters:
          - name: envoy.http_connection_manager
            config:
              codec_type: auto
              stat_prefix: ingress_http
              route_config:
                name: local_route
                virtual_hosts:
                - name: local_service
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/client/" }
                    route:
                      cluster: client
                      max_grpc_timeout: 0s
                  - match: { prefix: "/server/" }
                    route:
                      cluster: server
                      max_grpc_timeout: 0s
                      prefix_rewrite: "/"
                  cors:
                    allow_origin_string_match:
                    - prefix: "*"
                    allow_methods: GET, PUT, DELETE, POST, OPTIONS
                    allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,custom-header-1,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout
                    max_age: "1728000"
                    expose_headers: custom-header-1,grpc-status,grpc-message
              http_filters:
              - name: envoy.grpc_web
              - name: envoy.cors
              - name: envoy.router
      clusters:
      - name: server
        connect_timeout: 0.25s
        type: logical_dns
        http2_protocol_options: {}
        lb_policy: round_robin
        hosts: [{ socket_address: { address: server, port_value: 8080 }}]
      - name: client
        connect_timeout: 0.25s
        type: logical_dns
        lb_policy: round_robin
        hosts: [{ socket_address: { address: client, port_value: 8080 }}]
